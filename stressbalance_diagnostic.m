function [] = stressbalance_diagnostic(md, axes, friction_law);
    if strcmp(friction_law, 'budd')
        friction_field = md.friction.coefficient; % budd
    elseif strcmp(friction_law, 'schoof')
        friction_field = md.friction.C; % schoof
    elseif strcmp(friction_law, 'weertman')
        friction_field = md.friction.C; % weertman
    else
        warning("Friction Law not known: choose budd or schoof")
    end

    vel = md.results.StressbalanceSolution.Vel;
    vel_obs = md.inversion.vel_obs;
    gradient = md.results.StressbalanceSolution.Gradient1;
    plotmodel(md, 'data', vel, ...
                  'data', vel - vel_obs, ...
                  'data', gradient, ...
                  'data', log(friction_field) / log(10), ...
                  'figure', 3, 'axis#all', axes)


    plotmodel(md, 'data', log(vel) / log(10), ...
                  'data', vel - vel_obs, ...
                  'data', gradient, ...
                  'data', friction_field, ...
                  'figure', 4, 'axis#all', axes, ...
                  'caxis#2', [-1e3, 1e3], ...
                  'caxis#3', [-1e-3, 1e-3], ...
                  'caxis#4', [0, 500])
end