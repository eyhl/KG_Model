function [] = tmp_plotting(absolute, zoom, cval)
    n_alphas = 15;
    res = 300;
    if nargin < 1
        absolute = false
    end
    snap_shot = false; % only produce snapshot plots of specific models, otherwise movie.
    
    md1 = loadmodel('Models/accepted_models/Model_kangerlussuaq_budd.mat');
    md2 = loadmodel('Models/accepted_models/schoof_0.6_5000_2_i14.mat');
    md3 = loadmodel('Models/accepted_models/schoof_0.7_5000_2_i14.mat');
    md4 = loadmodel('Models/accepted_models/schoof_0.8_5000_2_i14.mat');
    % md5 = loadmodel('md_s5.mat');

    misfit1 = md1.results.StressbalanceSolution.Vel;% - md1.inversion.vel_obs;
    misfit2 = md2.results.StressbalanceSolution.Vel;% - md2.inversion.vel_obs;
    misfit3 = md3.results.StressbalanceSolution.Vel;% - md3.inversion.vel_obs;
    misfit4 = md4.results.StressbalanceSolution.Vel ;%- md4.inversion.vel_obs;
    % misfit5 = md5.results.StressbalanceSolution.Vel - md5.inversion.vel_obs;

    misfit1(md1.inversion.vel_obs==0) = 0;
    misfit2(md2.inversion.vel_obs==0) = 0;
    misfit3(md3.inversion.vel_obs==0) = 0;
    misfit4(md4.inversion.vel_obs==0) = 0;
    % misfit5(md5.inversion.vel_obs==0) = 0;

    if absolute
        misfit1 = abs(misfit1);
        misfit2 = abs(misfit2);
        misfit3 = abs(misfit3);
        misfit4 = abs(misfit4);
        % misfit5 = abs(misfit5);
    end

    % plotmodels
    if snap_shot
        if nargin < 2
            plotmodel(md1, 'data', misfit1, 'title', 'budd', 'data', misfit2, 'title', 'Cmax=0.6', 'data', misfit3, 'title', 'Cmax=0.7', 'data', misfit4, 'title', 'Cmax=0.8', 'figure', 120); colormap('turbo');
            plotmodel(md1, 'data', md1.results.StressbalanceSolution.Gradient1, 'title', 'budd', 'data',  md2.results.StressbalanceSolution.Gradient1, 'title', 'Cmax=0.6', ...
            'data', md3.results.StressbalanceSolution.Gradient1,  'title', 'Cmax=0.7', 'data',  md4.results.StressbalanceSolution.Gradient1, 'title', 'Cmax=0.8', 'figure', 121); colormap('turbo');
        elseif nargin < 3
            plotmodel(md1, 'data', misfit1, 'title', 'budd', 'data', misfit2, 'title', 'Cmax=0.6', 'data', misfit3, 'title', 'Cmax=0.7', 'data', misfit4, 'title', 'Cmax=0.8', 'axis#all', zoom, 'figure', 120); colormap('turbo');
            plotmodel(md1, 'data', md1.results.StressbalanceSolution.Gradient1, 'title', 'budd', 'data',  md2.results.StressbalanceSolution.Gradient1, 'title', 'Cmax=0.6', ...
            'data',  md3.results.StressbalanceSolution.Gradient1, 'title', 'Cmax=0.7',  'data',  md4.results.StressbalanceSolution.Gradient1, 'title', 'Cmax=0.8', 'axis#all', zoom, 'figure', 121); colormap('turbo');

        else
            plotmodel(md1, 'data', misfit1, 'title', 'budd', 'data', misfit2, 'title', 'Cmax=0.6', 'data', misfit3, 'title', 'Cmax=0.7', 'data', misfit4, 'title', 'Cmax=0.8', 'axis#all', zoom, 'caxis#all', cval(1, :), 'figure', 120); colormap('turbo');
            plotmodel(md1, 'data', md1.results.StressbalanceSolution.Gradient1, 'title', 'budd', 'data',  md2.results.StressbalanceSolution.Gradient1, 'title', 'Cmax=0.6', ...
            'data',  md3.results.StressbalanceSolution.Gradient1, 'title', 'Cmax=0.7',  'data',  md4.results.StressbalanceSolution.Gradient1, 'title', 'Cmax=0.8', 'axis#all', zoom, 'caxis#all', cval(2, :), 'figure', 121); colormap('turbo');
        end
    else
        for i=2:n_alphas+1
            disp(i-1)
            fprintf("md%d.mat\n", i);
            fprintf("md%d.mat\n", i + n_alphas);
            fprintf("md%d.mat\n", i + n_alphas * 2);
            fprintf("md%d.mat\n", i + n_alphas * 3);
            fprintf("md%d.mat\n", i + n_alphas * 4);
            fprintf("md%d.mat\n", i + n_alphas * 5);
            fprintf("md%d.mat\n", i + n_alphas * 6);
            fprintf("md%d.mat\n", i + n_alphas * 7);
            fprintf("md%d.mat\n", i + n_alphas * 8);
            fprintf("md%d.mat\n", i + n_alphas * 9);
            fprintf("md%d.mat\n", i + n_alphas * 10);
            fprintf("md%d.mat\n", i + n_alphas * 11);
            fprintf("md%d.mat\n", i + n_alphas * 12);
            fprintf("md%d.mat\n", i + n_alphas * 13);
            fprintf("md%d.mat\n\n", i + n_alphas * 14);

            md1 = loadmodel(sprintf("Results/grid_search_schoof/schoof10/models/md%d.mat", i));
            md2 = loadmodel(sprintf("Results/grid_search_schoof/schoof10/models/md%d.mat", i + n_alphas));
            md3 = loadmodel(sprintf("Results/grid_search_schoof/schoof10/models/md%d.mat", i + n_alphas * 2));
            md4 = loadmodel(sprintf("Results/grid_search_schoof/schoof10/models/md%d.mat", i + n_alphas * 3));
            md5 = loadmodel(sprintf("Results/grid_search_schoof/schoof10/models/md%d.mat", i + n_alphas * 4));
            md6 = loadmodel(sprintf("Results/grid_search_schoof/schoof10/models/md%d.mat", i + n_alphas * 5));
            md7 = loadmodel(sprintf("Results/grid_search_schoof/schoof10/models/md%d.mat", i + n_alphas * 6));
            md8 = loadmodel(sprintf("Results/grid_search_schoof/schoof10/models/md%d.mat", i + n_alphas * 7));
            md9 = loadmodel(sprintf("Results/grid_search_schoof/schoof10/models/md%d.mat", i + n_alphas * 8));
            md10 = loadmodel(sprintf("Results/grid_search_schoof/schoof10/models/md%d.mat", i + n_alphas * 9));
            md11 = loadmodel(sprintf("Results/grid_search_schoof/schoof10/models/md%d.mat", i + n_alphas * 10));
            md12 = loadmodel(sprintf("Results/grid_search_schoof/schoof10/models/md%d.mat", i + n_alphas * 11));
            md13 = loadmodel(sprintf("Results/grid_search_schoof/schoof10/models/md%d.mat", i + n_alphas * 12));
            md14 = loadmodel(sprintf("Results/grid_search_schoof/schoof10/models/md%d.mat", i + n_alphas * 13));
            md15 = loadmodel(sprintf("Results/grid_search_schoof/schoof10/models/md%d.mat", i + n_alphas * 14));

            md_budd = loadmodel('Models/accepted_models/Model_kangerlussuaq_budd.mat');
            % md1 = loadmodel('Models/schoof_grid_run/md14.mat');
            % md2 = loadmodel('Models/schoof_grid_run/md37.mat');
            % md3 = loadmodel('Models/schoof_grid_run/md64.mat');
            % md4 = loadmodel('Models/schoof_grid_run/md88.mat');
            % md5 = loadmodel('Models/schoof_grid_run/md112.mat');

            misfit_budd = md_budd.results.StressbalanceSolution.Vel - md_budd.inversion.vel_obs;
            misfit1 = md1.results.StressbalanceSolution.Vel - md1.inversion.vel_obs;
            misfit2 = md2.results.StressbalanceSolution.Vel - md2.inversion.vel_obs;
            misfit3 = md3.results.StressbalanceSolution.Vel - md3.inversion.vel_obs;
            misfit4 = md4.results.StressbalanceSolution.Vel - md4.inversion.vel_obs;
            misfit5 = md5.results.StressbalanceSolution.Vel - md5.inversion.vel_obs;
            misfit6 = md6.results.StressbalanceSolution.Vel - md6.inversion.vel_obs;
            misfit7 = md7.results.StressbalanceSolution.Vel - md7.inversion.vel_obs;
            misfit8 = md8.results.StressbalanceSolution.Vel - md8.inversion.vel_obs;
            misfit9 = md9.results.StressbalanceSolution.Vel - md9.inversion.vel_obs;
            misfit10 = md10.results.StressbalanceSolution.Vel - md10.inversion.vel_obs;
            misfit11 = md11.results.StressbalanceSolution.Vel - md11.inversion.vel_obs;
            misfit12 = md12.results.StressbalanceSolution.Vel - md12.inversion.vel_obs;
            misfit13 = md13.results.StressbalanceSolution.Vel - md13.inversion.vel_obs;
            misfit14 = md14.results.StressbalanceSolution.Vel - md14.inversion.vel_obs;
            misfit15 = md15.results.StressbalanceSolution.Vel - md15.inversion.vel_obs;

            vel_budd = md_budd.results.StressbalanceSolution.Vel;
            vel1 = md1.results.StressbalanceSolution.Vel;
            vel2 = md2.results.StressbalanceSolution.Vel;
            vel3 = md3.results.StressbalanceSolution.Vel;
            vel4 = md4.results.StressbalanceSolution.Vel;
            vel5 = md5.results.StressbalanceSolution.Vel;
            vel6 = md6.results.StressbalanceSolution.Vel;
            vel7 = md7.results.StressbalanceSolution.Vel;
            vel8 = md8.results.StressbalanceSolution.Vel;
            vel9 = md9.results.StressbalanceSolution.Vel;
            vel10 = md10.results.StressbalanceSolution.Vel;
            vel11 = md11.results.StressbalanceSolution.Vel;
            vel12 = md12.results.StressbalanceSolution.Vel;
            vel13 = md13.results.StressbalanceSolution.Vel;
            vel14 = md14.results.StressbalanceSolution.Vel;
            vel15 = md15.results.StressbalanceSolution.Vel;

            misfit_budd(md_budd.inversion.vel_obs==0) = 0;
            misfit1(md1.inversion.vel_obs==0) = 0;
            misfit2(md2.inversion.vel_obs==0) = 0;
            misfit3(md3.inversion.vel_obs==0) = 0;
            misfit4(md4.inversion.vel_obs==0) = 0;
            misfit5(md5.inversion.vel_obs==0) = 0;
            misfit6(md6.inversion.vel_obs==0) = 0;
            misfit7(md7.inversion.vel_obs==0) = 0;
            misfit8(md8.inversion.vel_obs==0) = 0;
            misfit9(md9.inversion.vel_obs==0) = 0;
            misfit10(md10.inversion.vel_obs==0) = 0;
            misfit11(md11.inversion.vel_obs==0) = 0;
            misfit12(md12.inversion.vel_obs==0) = 0;
            misfit13(md13.inversion.vel_obs==0) = 0;
            misfit14(md14.inversion.vel_obs==0) = 0;
            misfit15(md15.inversion.vel_obs==0) = 0;

            misfit_exp = '/data/eigil/work/lia_kq/Exp/misfit_at_front.exp';
            misfit_at_front_pos = find(ContourToNodes(md_budd.mesh.x, md_budd.mesh.y, misfit_exp, 2));
            maf_budd = mean(abs((misfit_budd(misfit_at_front_pos))));
            maf1 = mean(abs((misfit1(misfit_at_front_pos))));
            maf2 = mean(abs((misfit2(misfit_at_front_pos))));
            maf3 = mean(abs((misfit3(misfit_at_front_pos))));
            maf4 = mean(abs((misfit4(misfit_at_front_pos))));
            maf5 = mean(abs((misfit5(misfit_at_front_pos))));
            maf6 = mean(abs((misfit6(misfit_at_front_pos))));
            maf7 = mean(abs((misfit7(misfit_at_front_pos))));
            maf8 = mean(abs((misfit8(misfit_at_front_pos))));
            maf9 = mean(abs((misfit9(misfit_at_front_pos))));
            maf10 = mean(abs((misfit10(misfit_at_front_pos))));
            maf11 = mean(abs((misfit11(misfit_at_front_pos))));
            maf12 = mean(abs((misfit12(misfit_at_front_pos))));
            maf13 = mean(abs((misfit13(misfit_at_front_pos))));
            maf14 = mean(abs((misfit14(misfit_at_front_pos))));
            maf15 = mean(abs((misfit15(misfit_at_front_pos))));

            % Cmax_list = [0.6000, 0.6300, 0.6500, 0.6800, 0.7100, 0.7300, 0.7600, 0.7900, 0.8100, 0.8400];
            Cmax_list = [0.7400, 0.7543, 0.7686, 0.7829, 0.7971, 0.8114, 0.8257, 0.8400, 0.8543, 0.8686, 0.8829, 0.8971, 0.9114, 0.9257, 0.9400];

            title_budd = sprintf('Budd, MAE_f=%.2f', maf_budd);
            title_1 = sprintf('MAE_f=%.2f, Cmax=%.2f', maf1, Cmax_list(1));
            title_2 = sprintf('MAE_f=%.2f, Cmax=%.2f', maf2, Cmax_list(2));
            title_3 = sprintf('MAE_f=%.2f, Cmax=%.2f', maf3, Cmax_list(3));
            title_4 = sprintf('MAE_f=%.2f, Cmax=%.2f', maf4, Cmax_list(4));
            title_5 = sprintf('MAE_f=%.2f, Cmax=%.2f', maf5, Cmax_list(5));
            title_6 = sprintf('MAE_f=%.2f, Cmax=%.2f', maf6, Cmax_list(6));
            title_7 = sprintf('MAE_f=%.2f, Cmax=%.2f', maf7, Cmax_list(7));
            title_8 = sprintf('MAE_f=%.2f, Cmax=%.2f', maf8, Cmax_list(8));
            title_9 = sprintf('MAE_f=%.2f, Cmax=%.2f', maf9, Cmax_list(9));
            title_10 = sprintf('MAE_f=%.2f, Cmax=%.2f', maf10, Cmax_list(10));
            title_11 = sprintf('MAE_f=%.2f, Cmax=%.2f', maf11, Cmax_list(11));
            title_12 = sprintf('MAE_f=%.2f, Cmax=%.2f', maf12, Cmax_list(12));
            title_13 = sprintf('MAE_f=%.2f, Cmax=%.2f', maf13, Cmax_list(13));
            title_14 = sprintf('MAE_f=%.2f, Cmax=%.2f', maf14, Cmax_list(14));
            title_15 = sprintf('MAE_f=%.2f, Cmax=%.2f', maf15, Cmax_list(15));

            % TODO: plot J contours as a function of cmax and alpha

            plotmodel(md1,  ...
            'data', vel_budd, 'title', title_budd,  ...
            'data', vel1, 'title', title_1,  ...
            'data', vel2, 'title', title_2,  ...
            'data', vel3, 'title', title_3,  ...
            'data', vel4, 'title', title_4, ...
            'data', vel5, 'title', title_5, ...
            'data', vel6, 'title', title_6,  ...
            'data', vel7, 'title', title_7,  ...
            'data', vel8, 'title', title_8,  ...
            'data', vel9, 'title', title_9, ...
            'data', vel10, 'title', title_10, ...
            'data', vel11, 'title', title_11, ...
            'data', vel12, 'title', title_12, ...
            'data', vel13, 'title', title_13, ...
            'data', vel14, 'title', title_14, ...
            'data', vel15, 'title', title_15, ...
            'data', md_budd.inversion.vel_obs, 'title', 'Observed velocity', 'expdisp#17', misfit_exp, ...
            'axis#all', zoom, 'fontsize#all', 7, 'figure', 120); colormap('turbo'); exportgraphics(gcf, sprintf("vel%d.png", i - 1), 'Resolution', res);

            plotmodel(md1, ...
            'data', misfit_budd, 'title', title_budd, ...
            'data', misfit1, 'title', title_1, ...
            'data', misfit2, 'title', title_2, ...
            'data', misfit3, 'title', title_3, ...
            'data', misfit4, 'title', title_4,...
            'data', misfit5, 'title', title_5, ...
            'data', misfit6, 'title', title_6, ...
            'data', misfit7, 'title', title_7, ...
            'data', misfit8, 'title', title_8, ...
            'data', misfit9, 'title', title_9,...
            'data', misfit10, 'title', title_10, ...
            'data', misfit11, 'title', title_11, ...
            'data', misfit12, 'title', title_12, ...
            'data', misfit13, 'title', title_13, ...
            'data', misfit14, 'title', title_14, ...
            'data', misfit15, 'title', title_15, ...
            'axis#all', zoom, 'fontsize#all', 7, 'figure', 121); colormap('turbo'); exportgraphics(gcf, sprintf("misfit%d.png", i - 1), 'Resolution', res);

            plotmodel(md1, ...
            'data', misfit_budd, 'title', title_budd, ...
            'data', misfit1, 'title', title_1, ...
            'data', misfit2, 'title', title_2, ...
            'data', misfit3, 'title', title_3, ...
            'data', misfit4, 'title', title_4,...
            'data', misfit5, 'title', title_5, ...
            'data', misfit6, 'title', title_6, ...
            'data', misfit7, 'title', title_7, ...
            'data', misfit8, 'title', title_8, ...
            'data', misfit9, 'title', title_9,...
            'data', misfit10, 'title', title_10, ...
            'data', misfit11, 'title', title_11, ...
            'data', misfit12, 'title', title_12, ...
            'data', misfit13, 'title', title_13, ...
            'data', misfit14, 'title', title_14, ...
            'data', misfit15, 'title', title_15, ...
            'axis#all', zoom, 'fontsize#all', 7, 'caxis#all', cval(1, :), 'figure', 122); colormap('turbo'); exportgraphics(gcf, sprintf("misfit_cval%d.png", i - 1), 'Resolution', res);

            plotmodel(md1, ...
            'data', md_budd.results.StressbalanceSolution.Gradient1, 'title', title_budd, ...
            'data', md1.results.StressbalanceSolution.Gradient1, 'title', title_1, ...
            'data', md2.results.StressbalanceSolution.Gradient1, 'title', title_2, ...
            'data', md3.results.StressbalanceSolution.Gradient1, 'title', title_3, ...
            'data', md4.results.StressbalanceSolution.Gradient1, 'title', title_4, ...
            'data', md5.results.StressbalanceSolution.Gradient1, 'title', title_5, ...
            'data', md6.results.StressbalanceSolution.Gradient1, 'title', title_6, ...
            'data', md7.results.StressbalanceSolution.Gradient1, 'title', title_7, ...
            'data', md8.results.StressbalanceSolution.Gradient1, 'title', title_8, ...
            'data', md9.results.StressbalanceSolution.Gradient1, 'title', title_9, ...
            'data', md10.results.StressbalanceSolution.Gradient1, 'title', title_10, ...
            'data', md11.results.StressbalanceSolution.Gradient1, 'title', title_11, ...
            'data', md12.results.StressbalanceSolution.Gradient1, 'title', title_12, ...
            'data', md13.results.StressbalanceSolution.Gradient1, 'title', title_13, ...
            'data', md14.results.StressbalanceSolution.Gradient1, 'title', title_14, ...
            'data', md15.results.StressbalanceSolution.Gradient1, 'title', title_15, ...
            'axis#all', zoom, 'fontsize#all', 7, 'figure', 123); colormap('turbo'); exportgraphics(gcf, sprintf("gradient%d.png", i - 1), 'Resolution', res);

            plotmodel(md1, ...
            'data', md_budd.results.StressbalanceSolution.Gradient1, 'title', title_budd, ...
            'data', md1.results.StressbalanceSolution.Gradient1, 'title', title_1, ...
            'data', md2.results.StressbalanceSolution.Gradient1, 'title', title_2, ...
            'data', md3.results.StressbalanceSolution.Gradient1, 'title', title_3, ...
            'data', md4.results.StressbalanceSolution.Gradient1, 'title', title_4, ...
            'data', md5.results.StressbalanceSolution.Gradient1, 'title', title_5, ...
            'data', md6.results.StressbalanceSolution.Gradient1, 'title', title_6, ...
            'data', md7.results.StressbalanceSolution.Gradient1, 'title', title_7, ...
            'data', md8.results.StressbalanceSolution.Gradient1, 'title', title_8, ...
            'data', md9.results.StressbalanceSolution.Gradient1, 'title', title_9, ...
            'data', md10.results.StressbalanceSolution.Gradient1, 'title', title_10, ...
            'data', md11.results.StressbalanceSolution.Gradient1, 'title', title_11, ...
            'data', md12.results.StressbalanceSolution.Gradient1, 'title', title_12, ...
            'data', md13.results.StressbalanceSolution.Gradient1, 'title', title_13, ...
            'data', md14.results.StressbalanceSolution.Gradient1, 'title', title_14, ...
            'data', md15.results.StressbalanceSolution.Gradient1, 'title', title_15, ...
            'axis#all', zoom, 'fontsize#all', 7, 'caxis#all', cval(2, :), 'figure', 124); colormap('turbo'); exportgraphics(gcf, sprintf("gradient_cval%d.png", i - 1), 'Resolution', res);

            plotmodel(md1, ...
            'data', md_budd.friction.coefficient, 'title', title_budd, ...
            'data', md1.friction.C, 'title', title_1, ...
            'data', md2.friction.C, 'title', title_2, ...
            'data', md3.friction.C, 'title', title_3, ...
            'data', md4.friction.C, 'title', title_4, ...
            'data', md5.friction.C, 'title', title_5, ...
            'data', md6.friction.C, 'title', title_6, ...
            'data', md7.friction.C, 'title', title_7, ...
            'data', md8.friction.C, 'title', title_8, ...
            'data', md9.friction.C, 'title', title_9, ...
            'data', md10.friction.C, 'title', title_10, ...
            'data', md11.friction.C, 'title', title_11, ...
            'data', md12.friction.C, 'title', title_12, ...
            'data', md13.friction.C, 'title', title_13, ...
            'data', md14.friction.C, 'title', title_14, ...
            'data', md15.friction.C, 'title', title_15, ...
             'axis#all', zoom, 'fontsize#all', 7, 'log#all', 10, 'caxis#all', [0.001 1e4], 'figure', 125); colormap('turbo'); exportgraphics(gcf, sprintf("friction_C_log%d.png", i - 1), 'Resolution', res);

            % misfit1 = abs(misfit1);
            % misfit2 = abs(misfit2);
            % misfit3 = abs(misfit3);
            % misfit4 = abs(misfit4);
            % misfit5 = abs(misfit5);
            % plotmodel(md1, 'data', misfit1, 'data', misfit2, 'data', misfit3, 'data', misfit4, 'data', misfit5, 'axis#all', zoom, 'caxis#all', cval(1, :), 'figure', 120); exportgraphics(gcf, sprintf("abs_misfit%d.png", i - 1), 'Resolution', res);
        end

    end
    % md1.inversion.cost_functions_coefficients(1, 3)
    % md2.inversion.cost_functions_coefficients(1, 3)
    % md3.inversion.cost_functions_coefficients(1, 3)
    % md4.inversion.cost_functions_coefficients(1, 3)
    % md5.inversion.cost_functions_coefficients(1, 3)

    % plotmodel(md1, 'data', md1.inversion.cost_functions_coefficients(:, 3), 'data', md2.inversion.cost_functions_coefficients(:, 3), 'data', md3.inversion.cost_functions_coefficients(:, 3), ...
    % 'data', md4.inversion.cost_functions_coefficients(:, 3), 'data', md5.inversion.cost_functions_coefficients(:, 3), 'axis#all', zoom, 'figure', 122)

end
